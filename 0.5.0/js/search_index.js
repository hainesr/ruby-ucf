var search_data = {"index":{"searchIndex":["ucf","container","malformeducferror","manageddirectory","managedentries","managedentry","managedfile","metainf","reservednameclasherror","reservednames","ucferror","version","add()","close()","comment()","comment=()","commit()","commit_required?()","container()","create()","dir()","each()","each_entry()","entries->enumerable()","exists?()","extract()","file()","find_entry()","full_name()","get_entry()","get_input_stream()","get_output_stream()","glob()","in_memory?()","initialize_managed_entries()","managed_directories()","managed_directory?()","managed_directory_names()","managed_entries()","managed_entry?()","managed_entry_names()","managed_file?()","managed_file_names()","managed_files()","mkdir()","name()","new()","new()","new()","new()","new()","new()","on_disk?()","open()","read()","register_managed_entry()","register_reserved_name()","remove()","rename()","replace()","required?()","reserved_entry?()","reserved_names()","size()","to_s()","validate()","verify()","verify()","verify!()","verify!()","verify!()","verify!()","verify!()","verify_managed_entries!()","changes","licence","readme"],"longSearchIndex":["ucf","ucf::container","ucf::malformeducferror","ucf::manageddirectory","ucf::managedentries","ucf::managedentry","ucf::managedfile","ucf::metainf","ucf::reservednameclasherror","ucf::reservednames","ucf::ucferror","ucf::version","ucf::container#add()","ucf::container#close()","ucf::container#comment()","ucf::container#comment=()","ucf::container#commit()","ucf::container#commit_required?()","ucf::managedentry#container()","ucf::container::create()","ucf::container#dir()","ucf::container#each()","ucf::container::each_entry()","ucf::container#entries->enumerable()","ucf::managedentry#exists?()","ucf::container#extract()","ucf::container#file()","ucf::container#find_entry()","ucf::managedentry#full_name()","ucf::container#get_entry()","ucf::container#get_input_stream()","ucf::container#get_output_stream()","ucf::container#glob()","ucf::container#in_memory?()","ucf::managedentries#initialize_managed_entries()","ucf::managedentries#managed_directories()","ucf::managedentries#managed_directory?()","ucf::managedentries#managed_directory_names()","ucf::managedentries#managed_entries()","ucf::managedentries#managed_entry?()","ucf::managedentries#managed_entry_names()","ucf::managedentries#managed_file?()","ucf::managedentries#managed_file_names()","ucf::managedentries#managed_files()","ucf::container#mkdir()","ucf::container#name()","ucf::malformeducferror::new()","ucf::manageddirectory::new()","ucf::managedentry::new()","ucf::managedfile::new()","ucf::metainf::new()","ucf::reservednameclasherror::new()","ucf::container#on_disk?()","ucf::container::open()","ucf::container#read()","ucf::managedentries#register_managed_entry()","ucf::reservednames#register_reserved_name()","ucf::container#remove()","ucf::container#rename()","ucf::container#replace()","ucf::managedentry#required?()","ucf::reservednames#reserved_entry?()","ucf::reservednames#reserved_names()","ucf::container#size()","ucf::container#to_s()","ucf::managedfile#validate()","ucf::container::verify()","ucf::managedentry#verify()","ucf::container::verify!()","ucf::container#verify!()","ucf::manageddirectory#verify!()","ucf::managedentry#verify!()","ucf::managedfile#verify!()","ucf::managedentries#verify_managed_entries!()","","",""],"info":[["UCF","","UCF.html","","<p>This is a ruby library to read and write UCF files in PK Zip format. See\nthe UCF::Container class for …\n"],["UCF::Container","","UCF/Container.html","","<p>This class represents a UCF document in PK Zip format. See the\nspecification for more details.\n<p>This class …\n"],["UCF::MalformedUCFError","","UCF/MalformedUCFError.html","","<p>This exception is raised when a bad UCF is detected.\n"],["UCF::ManagedDirectory","","UCF/ManagedDirectory.html","","<p>A ManagedDirectory acts as the interface to a set of (possibly) managed\nfiles within it and also reserves …\n"],["UCF::ManagedEntries","","UCF/ManagedEntries.html","","<p>This module provides support for managed file and directory entries.\n<p><strong>Note!</strong> If you mix this module in you ...\n"],["UCF::ManagedEntry","","UCF/ManagedEntry.html","","<p>ManagedEntry is the superclass of ManagedDirectory and ManagedFile. It\nshould not be used directly but …\n"],["UCF::ManagedFile","","UCF/ManagedFile.html","","<p>A ManagedFile is used to reserve a filename in a Container namespace.\n"],["UCF::MetaInf","","UCF/MetaInf.html","","<p>This is a subclass of ManagedDirectory to represent the META-INF directory\nin a basic UCF Document.\n"],["UCF::ReservedNameClashError","","UCF/ReservedNameClashError.html","","<p>This exception is raised when a clash occurs with a reserved or managed\nname.\n"],["UCF::ReservedNames","","UCF/ReservedNames.html","","<p>This module provides support for reserved names.\n"],["UCF::UCFError","","UCF/UCFError.html","","<p>The base class of all other exceptions raised by this library.\n"],["UCF::Version","","UCF/Version.html","","<p>Library version information.\n"],["add","UCF::Container","UCF/Container.html#method-i-add","(entry, src_path, &continue_on_exists_proc)","<p>Convenience method for adding the contents of a file to the UCF document.\nIf asked to add a file with …\n"],["close","UCF::Container","UCF/Container.html#method-i-close","()",""],["comment","UCF::Container","UCF/Container.html#method-i-comment","","<p>Returns the UCF document comment, if it has one.\n"],["comment=","UCF::Container","UCF/Container.html#method-i-comment-3D","","<p>Set the UCF document comment to the new value.\n"],["commit","UCF::Container","UCF/Container.html#method-i-commit","()","<p>Commits changes that have been made since the previous commit to the UCF\ndocument. Returns <code>true</code> if anything …\n"],["commit_required?","UCF::Container","UCF/Container.html#method-i-commit_required-3F","","<p>Returns <code>true</code> if any changes have been made to this UCF\ndocument since the last commit, <code>false</code> otherwise. …\n"],["container","UCF::ManagedEntry","UCF/ManagedEntry.html#method-i-container","()","<p>Return the Container that this ManagedEntry resides in.\n"],["create","UCF::Container","UCF/Container.html#method-c-create","(filename, mimetype = DEFAULT_MIMETYPE, &block)","<p>Create a new UCF document on disk with the specified mimetype.\n"],["dir","UCF::Container","UCF/Container.html#method-i-dir","()","<p>Returns an object which can be used like ruby’s built in <code>Dir</code>\n(class) object, except that it works on …\n"],["each","UCF::Container","UCF/Container.html#method-i-each","","<p>Iterate over the entries in the UCF document. The entry objects returned by\nthis method are Zip::ZipEntry …\n"],["each_entry","UCF::Container","UCF/Container.html#method-c-each_entry","(filename, &block)","<p>Iterate over the entries in the UCF document. The entry objects returned by\nthis method are Zip::ZipEntry …\n"],["entries -> Enumerable\n","UCF::Container","UCF/Container.html#method-i-entries+-2D-3E+Enumerable-0A","","<p>Returns an Enumerable containing all the entries in the UCF Document. The\nentry objects returned by this …\n"],["exists?","UCF::ManagedEntry","UCF/ManagedEntry.html#method-i-exists-3F","()","<p>Does this ManagedEntry exist in the Container?\n"],["extract","UCF::Container","UCF/Container.html#method-i-extract","","<p>Extracts the specified entry of the UCF document to <code>dest_path</code>.\n<p>See the rubyzip documentation for details …\n"],["file","UCF::Container","UCF/Container.html#method-i-file","()","<p>Returns an object which can be used like ruby’s built in <code>File</code>\n(class) object, except that it works on …\n"],["find_entry","UCF::Container","UCF/Container.html#method-i-find_entry","","<p>Searches for entries within the UCF document with the specified name.\nReturns <code>nil</code> if no entry is found. …\n"],["full_name","UCF::ManagedEntry","UCF/ManagedEntry.html#method-i-full_name","()","<p>The fully qualified name of this ManagedEntry.\n"],["get_entry","UCF::Container","UCF/Container.html#method-i-get_entry","","<p>Searches for an entry within the UCF document in a similar manner to\n<code>find_entry</code>, but throws +Errno::ENOENT+ …\n"],["get_input_stream","UCF::Container","UCF/Container.html#method-i-get_input_stream","","<p>Returns an input stream to the specified entry. If a block is passed the\nstream object is passed to the …\n"],["get_output_stream","UCF::Container","UCF/Container.html#method-i-get_output_stream","(entry, permission = nil, &block)","<p>Returns an output stream to the specified entry. If a block is passed the\nstream object is passed to …\n"],["glob","UCF::Container","UCF/Container.html#method-i-glob","","<p>Searches for entries within the UCF document that match the given glob.\n<p>See the rubyzip documentation …\n"],["in_memory?","UCF::Container","UCF/Container.html#method-i-in_memory-3F","()","<p>Is this UCF document memory resident as opposed to stored on disk?\n"],["initialize_managed_entries","UCF::ManagedEntries","UCF/ManagedEntries.html#method-i-initialize_managed_entries","(entries = [])","<p>Initialize the managed entries and register any that are supplied. A single\nManagedFile or ManagedDirectory …\n"],["managed_directories","UCF::ManagedEntries","UCF/ManagedEntries.html#method-i-managed_directories","()","<p>Return the list of managed directories.\n"],["managed_directory?","UCF::ManagedEntries","UCF/ManagedEntries.html#method-i-managed_directory-3F","(entry)","<p>Is the supplied entry/name a managed directory?\n"],["managed_directory_names","UCF::ManagedEntries","UCF/ManagedEntries.html#method-i-managed_directory_names","()","<p>Return the list of managed directory names.\n"],["managed_entries","UCF::ManagedEntries","UCF/ManagedEntries.html#method-i-managed_entries","()","<p>Return the list of managed files and directories.\n"],["managed_entry?","UCF::ManagedEntries","UCF/ManagedEntries.html#method-i-managed_entry-3F","(entry, list = managed_entry_names)","<p>Is the supplied entry/name a managed entry?\n"],["managed_entry_names","UCF::ManagedEntries","UCF/ManagedEntries.html#method-i-managed_entry_names","()","<p>Return the list of managed file and directory names.\n"],["managed_file?","UCF::ManagedEntries","UCF/ManagedEntries.html#method-i-managed_file-3F","(entry)","<p>Is the supplied entry/name a managed file?\n"],["managed_file_names","UCF::ManagedEntries","UCF/ManagedEntries.html#method-i-managed_file_names","()","<p>Return the list of managed file names.\n"],["managed_files","UCF::ManagedEntries","UCF/ManagedEntries.html#method-i-managed_files","()","<p>Return the list of managed files.\n"],["mkdir","UCF::Container","UCF/Container.html#method-i-mkdir","(name, permission = 0755)","<p>Creates a directory in the UCF document. If asked to create a directory\nwith a reserved name this method …\n"],["name","UCF::Container","UCF/Container.html#method-i-name","","<p>Returns the filename of this UCF document.\n"],["new","UCF::MalformedUCFError","UCF/MalformedUCFError.html#method-c-new","(reason = nil)","<p>Create a new MalformedUCFError with an optional reason for why the UCF\ndocument is malformed.\n"],["new","UCF::ManagedDirectory","UCF/ManagedDirectory.html#method-c-new","(name, required = false, entries = [])","<p>Create a new ManagedDirectory with the supplied name and whether it is\nrequired to exist or not. Any …\n"],["new","UCF::ManagedEntry","UCF/ManagedEntry.html#method-c-new","(name, required)","<p>Create a new ManagedEntry with the supplied name. The entry should also be\nmarked as required or not. …\n"],["new","UCF::ManagedFile","UCF/ManagedFile.html#method-c-new","(name, required = false, validation_proc = nil)","<p>Create a new ManagedFile with the supplied name and whether it is required\nto exist or not.\n<p>If supplied …\n"],["new","UCF::MetaInf","UCF/MetaInf.html#method-c-new","()","<p>Create a standard META-INF ManagedDirectory.\n"],["new","UCF::ReservedNameClashError","UCF/ReservedNameClashError.html#method-c-new","(name)","<p>Create a new ReservedNameClashError with the name of the clash supplied.\n"],["on_disk?","UCF::Container","UCF/Container.html#method-i-on_disk-3F","()","<p>Is this UCF document stored on disk as opposed to memory resident?\n"],["open","UCF::Container","UCF/Container.html#method-c-open","(filename, &block)","<p>Open an existing UCF document from disk. It will be checked for conformance\nto the UCF specification …\n"],["read","UCF::Container","UCF/Container.html#method-i-read","","<p>Returns a string containing the contents of the specified entry.\n"],["register_managed_entry","UCF::ManagedEntries","UCF/ManagedEntries.html#method-i-register_managed_entry","(entry)","<p>Register a ManagedFile or ManagedDirectory.\n<p>A ManagedFile is used to reserve the name of a file in the …\n"],["register_reserved_name","UCF::ReservedNames","UCF/ReservedNames.html#method-i-register_reserved_name","(name)","<p>Add a reserved name to the list.\n"],["remove","UCF::Container","UCF/Container.html#method-i-remove","(entry)","<p>Removes the specified entry from the UCF document. If asked to remove any\nreserved files such as the …\n"],["rename","UCF::Container","UCF/Container.html#method-i-rename","(entry, new_name, &continue_on_exists_proc)","<p>Renames the specified entry in the UCF document. If asked to rename any\nreserved files such as the special …\n"],["replace","UCF::Container","UCF/Container.html#method-i-replace","(entry, src_path)","<p>Replaces the specified entry of the UCF document with the contents of\n<code>src_path</code> (from the file system). …\n"],["required?","UCF::ManagedEntry","UCF/ManagedEntry.html#method-i-required-3F","()","<p>Is this ManagedEntry required to be present according to the specification\nof its Container?\n"],["reserved_entry?","UCF::ReservedNames","UCF/ReservedNames.html#method-i-reserved_entry-3F","(entry)","<p>Is the given entry in the reserved list of names? A String or a\nZip::ZipEntry object can be passed in …\n"],["reserved_names","UCF::ReservedNames","UCF/ReservedNames.html#method-i-reserved_names","()","<p>Return a list of reserved file and directory names for this UCF document.\n<p>Reserved files and directories …\n"],["size","UCF::Container","UCF/Container.html#method-i-size","","<p>Returns the number of entries in the UCF document.\n"],["to_s","UCF::Container","UCF/Container.html#method-i-to_s","()","<p>Return a textual summary of this UCF document.\n"],["validate","UCF::ManagedFile","UCF/ManagedFile.html#method-i-validate","()","<p>Validate the contents of this ManagedFile. By default this methods uses the\nvalidation Proc supplied …\n"],["verify","UCF::Container","UCF/Container.html#method-c-verify","(filename)","<p>Verify that the specified UCF document conforms to the UCF specification.\nThis method returns <code>false</code> if …\n"],["verify","UCF::ManagedEntry","UCF/ManagedEntry.html#method-i-verify","()","<p>Verify this ManagedEntry by checking that it exists if it is required\naccording to its Container specification …\n"],["verify!","UCF::Container","UCF/Container.html#method-c-verify-21","(filename)","<p>Verify that the specified UCF document conforms to the UCF specification.\nThis method raises exceptions …\n"],["verify!","UCF::Container","UCF/Container.html#method-i-verify-21","()","<p>Verify the contents of this UCF document. All managed files and directories\nare checked to make sure …\n"],["verify!","UCF::ManagedDirectory","UCF/ManagedDirectory.html#method-i-verify-21","()","<p>Verify this ManagedDirectory for correctness. ManagedFiles registered\nwithin it are verified recursively. …\n"],["verify!","UCF::ManagedEntry","UCF/ManagedEntry.html#method-i-verify-21","()","<p>Verify this ManagedEntry raising a MalformedUCFError if it fails.\n<p>Subclasses should override this method …\n"],["verify!","UCF::ManagedFile","UCF/ManagedFile.html#method-i-verify-21","()","<p>Verify this ManagedFile for correctness. The contents are validated if\nrequired.\n<p>A MalformedUCFError is …\n"],["verify_managed_entries!","UCF::ManagedEntries","UCF/ManagedEntries.html#method-i-verify_managed_entries-21","()","<p>All managed files and directories are checked to make sure that they exist,\nif required.\n"],["Changes","","Changes_rdoc.html","","<p>Changes log for the UCF Ruby Gem\n<p>Version 0.5.0\n<p>Add support for managed entries in the container.\n"],["Licence","","Licence_rdoc.html","","<p>Copyright © 2013 The University of Manchester, UK.\n<p>All rights reserved.\n<p>Redistribution and use in source …\n"],["ReadMe","","ReadMe_rdoc.html","","<p>Universal Container Format (UCF) Ruby Library\n<p>Authors &mdash; Robert Haines\n<p>Contact &mdash; support@mygrid.org.uk\n"]]}}