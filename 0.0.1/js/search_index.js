var search_data = {"index":{"searchIndex":["ucf","container","malformeducferror","version","add()","close()","comment()","commit()","create()","dir()","extract()","file()","find_entry()","get_entry()","get_input_stream()","get_output_stream()","glob()","mkdir()","name()","open()","read()","remove()","rename()","replace()","to_s()","verify()","verify!()","changes","licence","readme"],"longSearchIndex":["ucf","ucf::container","ucf::malformeducferror","ucf::version","ucf::container#add()","ucf::container#close()","ucf::container#comment()","ucf::container#commit()","ucf::container::create()","ucf::container#dir()","ucf::container#extract()","ucf::container#file()","ucf::container#find_entry()","ucf::container#get_entry()","ucf::container#get_input_stream()","ucf::container#get_output_stream()","ucf::container#glob()","ucf::container#mkdir()","ucf::container#name()","ucf::container::open()","ucf::container#read()","ucf::container#remove()","ucf::container#rename()","ucf::container#replace()","ucf::container#to_s()","ucf::container::verify()","ucf::container::verify!()","","",""],"info":[["UCF","","UCF.html","","<p>This is a ruby library to read and write UCF files in PK Zip format. See\nthe UCF::Container class for …\n"],["UCF::Container","","UCF/Container.html","","<p>This class represents a UCF file in PK Zip format. See\nlearn.adobe.com/wiki/display/PDFNAV/Universal+Container+Format …\n"],["UCF::MalformedUCFError","","UCF/MalformedUCFError.html","","<p>Exception raised when a bad UCF is detected.\n"],["UCF::Version","","UCF/Version.html","","<p>Library version information.\n"],["add","UCF::Container","UCF/Container.html#method-i-add","","<p>Convenience method for adding the contents of a file to the UCF file.\n<p>See the rubyzip documentation for …\n"],["close","UCF::Container","UCF/Container.html#method-i-close","","<p>Closes the UCF file committing any changes that have been made.\n"],["comment","UCF::Container","UCF/Container.html#method-i-comment","","<p>Returns the UCF file comment, if it has one.\n"],["commit","UCF::Container","UCF/Container.html#method-i-commit","","<p>Commits changes that have been made since the previous commit to the UCF\nfile.\n"],["create","UCF::Container","UCF/Container.html#method-c-create","(filename, mimetype = DEFAULT_MIMETYPE, &block)","<p>Create a new UCF file on disk with the specified mimetype.\n"],["dir","UCF::Container","UCF/Container.html#method-i-dir","","<p>Returns an object which can be used like ruby’s built in <code>Dir</code>\n(class) object, except that it works on …\n"],["extract","UCF::Container","UCF/Container.html#method-i-extract","","<p>Extracts the specified entry to <code>dest_path</code>.\n<p>See the rubyzip documentation for details of the\n<code>on_exists_proc</code> …\n"],["file","UCF::Container","UCF/Container.html#method-i-file","","<p>Returns an object which can be used like ruby’s built in <code>File</code>\n(class) object, except that it works on …\n"],["find_entry","UCF::Container","UCF/Container.html#method-i-find_entry","","<p>Searches for entries with the specified name. Returns <code>nil</code> if\nno entry is found. See also <code>get_entry</code>.\n"],["get_entry","UCF::Container","UCF/Container.html#method-i-get_entry","","<p>Searches for an entry like <code>find_entry</code>, but throws\n+Errno::ENOENT+ if no entry is found.\n"],["get_input_stream","UCF::Container","UCF/Container.html#method-i-get_input_stream","","<p>Returns an input stream to the specified entry. If a block is passed the\nstream object is passed to the …\n"],["get_output_stream","UCF::Container","UCF/Container.html#method-i-get_output_stream","","<p>Returns an output stream to the specified entry. If a block is passed the\nstream object is passed to …\n"],["glob","UCF::Container","UCF/Container.html#method-i-glob","","<p>Searches for entries given a glob.\n<p>See the rubyzip documentation for details of the parameters that can …\n"],["mkdir","UCF::Container","UCF/Container.html#method-i-mkdir","","<p>Creates a directory.\n<p>See the rubyzip documentation for details of the\n<code>permission_int</code> parameter.\n"],["name","UCF::Container","UCF/Container.html#method-i-name","","<p>Returns the filename of this UCF file.\n"],["open","UCF::Container","UCF/Container.html#method-c-open","(filename, &block)","<p>Open an existing UCF file from disk. It will be checked for conformance to\nthe UCF specification upon …\n"],["read","UCF::Container","UCF/Container.html#method-i-read","","<p>Returns a string containing the contents of the specified entry.\n"],["remove","UCF::Container","UCF/Container.html#method-i-remove","(entry)","<p>Removes the specified entry. If asked to remove the special mimetype header\nfile this method will do …\n"],["rename","UCF::Container","UCF/Container.html#method-i-rename","(entry, new_name, &continue_on_exists_proc)","<p>Renames the specified entry. If asked to rename the special mimetype header\nfile this method will do …\n"],["replace","UCF::Container","UCF/Container.html#method-i-replace","(entry, src_path)","<p>Replaces the specified entry with the contents of <code>src_path</code>\n(from the file system). If asked to replace …\n"],["to_s","UCF::Container","UCF/Container.html#method-i-to_s","()","<p>Return a String representation of this UCF file.\n"],["verify","UCF::Container","UCF/Container.html#method-c-verify","(filename)","<p>Verify that the specified UCF file conforms to the UCF specification. This\nmethod returns <code>false</code> if there …\n"],["verify!","UCF::Container","UCF/Container.html#method-c-verify-21","(filename)","<p>Verify that the specified UCF file conforms to the UCF specification. This\nmethod raises exceptions when …\n"],["Changes","","Changes_rdoc.html","","<p>Changes log for the UCF Ruby Gem\n<p>Version 0.0.1\n<p>Very basic UCF facilities complete (plus examples).\n"],["Licence","","Licence_rdoc.html","","<p>Copyright © 2013 The University of Manchester, UK.\n<p>All rights reserved.\n<p>Redistribution and use in source …\n"],["ReadMe","","ReadMe_rdoc.html","","<p>Universal Container Format (UCF) Ruby Library\n<p>Authors &mdash; Robert Haines\n<p>Contact &mdash; support@mygrid.org.uk\n"]]}}