#!/usr/bin/env ruby
# Copyright (c) 2013-2023 The University of Manchester, UK.
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#  * Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
#  * Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
#  * Neither the names of The University of Manchester nor the names of its
#    contributors may be used to endorse or promote products derived from this
#    software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Author: Robert Haines

require 'rubygems'
require 'bundler/setup'
require 'ucf'

def usage
  puts "Usage:\n  ucfinfo <ucf-file>"
  exit 1
end

usage unless ARGV.length == 1

ucffile = ARGV[0]

begin
  ucf = UCF::File.open(ucffile)
rescue ZipContainer::MalformedContainerError, ZipContainer::Error => e
  puts e
  exit 1
end

puts "Archive: #{ucf}"
puts "UCF file size: #{File.size(ucffile)} bytes, number of entries: #{ucf.size}"

total_size = 0
total_comp = 0

ucf.each do |entry|
  total_size += entry.size
  total_comp += entry.compressed_size
  comp = entry.compression_method.zero? ? 'stor' : 'defN'
  size = entry.size.to_s.rjust(8)
  puts "#{size} #{comp} #{entry.time} #{entry.name}"
end

ratio = ((total_size - total_comp) / total_size.to_f) * 100
puts '%d files, %d bytes uncompressed, %d bytes compressed: %.1f%%' %
  [ucf.size, total_size, total_comp, ratio]
